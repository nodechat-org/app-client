diff --git a/node_modules/react-native-web/dist/exports/UIManager/index.js b/node_modules/react-native-web/dist/exports/UIManager/index.js
index 7989d92..01da875 100644
--- a/node_modules/react-native-web/dist/exports/UIManager/index.js
+++ b/node_modules/react-native-web/dist/exports/UIManager/index.js
@@ -6,132 +6,132 @@
  *
  *
  */
-import getBoundingClientRect from '../../modules/getBoundingClientRect';
-import setValueForStyles from '../../modules/setValueForStyles';
+import getBoundingClientRect from "../../modules/getBoundingClientRect";
+import setValueForStyles from "../../modules/setValueForStyles";
 
 var getRect = function getRect(node) {
-  // Unlike the DOM's getBoundingClientRect, React Native layout measurements
-  // for "height" and "width" ignore scale transforms.
-  // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements
-  var _getBoundingClientRec = getBoundingClientRect(node),
-      x = _getBoundingClientRec.x,
-      y = _getBoundingClientRec.y,
-      top = _getBoundingClientRec.top,
-      left = _getBoundingClientRec.left;
+	// Unlike the DOM's getBoundingClientRect, React Native layout measurements
+	// for "height" and "width" ignore scale transforms.
+	// https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements
+	var _getBoundingClientRec = getBoundingClientRect(node),
+		x = _getBoundingClientRec.x,
+		y = _getBoundingClientRec.y,
+		top = _getBoundingClientRec.top,
+		left = _getBoundingClientRec.left;
 
-  var width = node.offsetWidth;
-  var height = node.offsetHeight;
-  return {
-    x: x,
-    y: y,
-    width: width,
-    height: height,
-    top: top,
-    left: left
-  };
+	var width = node.offsetWidth;
+	var height = node.offsetHeight;
+	return {
+		x: x,
+		y: y,
+		width: width,
+		height: height,
+		top: top,
+		left: left,
+	};
 };
 
 var _measureLayout = function measureLayout(node, relativeToNativeNode, callback) {
-  var relativeNode = relativeToNativeNode || node && node.parentNode;
+	var relativeNode = relativeToNativeNode || (node && node.parentNode);
 
-  if (node && relativeNode) {
-    setTimeout(function () {
-      var relativeRect = getBoundingClientRect(relativeNode);
+	if (node && relativeNode) {
+		setTimeout(function () {
+			var relativeRect = getBoundingClientRect(relativeNode);
 
-      var _getRect = getRect(node),
-          height = _getRect.height,
-          left = _getRect.left,
-          top = _getRect.top,
-          width = _getRect.width;
+			var _getRect = getRect(node),
+				height = _getRect.height,
+				left = _getRect.left,
+				top = _getRect.top,
+				width = _getRect.width;
 
-      var x = left - relativeRect.left;
-      var y = top - relativeRect.top;
-      callback(x, y, width, height, left, top);
-    }, 0);
-  }
+			var x = left - relativeRect.left;
+			var y = top - relativeRect.top;
+			callback(x, y, width, height, left, top);
+		}, 0);
+	}
 };
 
 var focusableElements = {
-  A: true,
-  INPUT: true,
-  SELECT: true,
-  TEXTAREA: true
+	A: true,
+	INPUT: true,
+	SELECT: true,
+	TEXTAREA: true,
 };
 var UIManager = {
-  blur: function blur(node) {
-    try {
-      node.blur();
-    } catch (err) {}
-  },
-  focus: function focus(node) {
-    try {
-      var name = node.nodeName; // A tabIndex of -1 allows element to be programmatically focused but
-      // prevents keyboard focus, so we don't want to set the value on elements
-      // that support keyboard focus by default.
+	blur: function blur(node) {
+		try {
+			node.blur();
+		} catch (err) {}
+	},
+	focus: function focus(node) {
+		try {
+			var name = node.nodeName; // A tabIndex of -1 allows element to be programmatically focused but
+			// prevents keyboard focus, so we don't want to set the value on elements
+			// that support keyboard focus by default.
 
-      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {
-        node.setAttribute('tabIndex', '-1');
-      }
+			if (node.getAttribute("tabIndex") == null && focusableElements[name] == null) {
+				node.setAttribute("tabIndex", "-1");
+			}
 
-      node.focus();
-    } catch (err) {}
-  },
-  measure: function measure(node, callback) {
-    _measureLayout(node, null, callback);
-  },
-  measureInWindow: function measureInWindow(node, callback) {
-    if (node) {
-      setTimeout(function () {
-        var _getRect2 = getRect(node),
-            height = _getRect2.height,
-            left = _getRect2.left,
-            top = _getRect2.top,
-            width = _getRect2.width;
+			node.focus();
+		} catch (err) {}
+	},
+	measure: function measure(node, callback) {
+		_measureLayout(node, null, callback);
+	},
+	measureInWindow: function measureInWindow(node, callback) {
+		if (node) {
+			setTimeout(function () {
+				var _getRect2 = getRect(node),
+					height = _getRect2.height,
+					left = _getRect2.left,
+					top = _getRect2.top,
+					width = _getRect2.width;
 
-        callback(left, top, width, height);
-      }, 0);
-    }
-  },
-  measureLayout: function measureLayout(node, relativeToNativeNode, onFail, onSuccess) {
-    _measureLayout(node, relativeToNativeNode, onSuccess);
-  },
-  updateView: function updateView(node, props) {
-    for (var prop in props) {
-      if (!Object.prototype.hasOwnProperty.call(props, prop)) {
-        continue;
-      }
+				callback(left, top, width, height);
+			}, 0);
+		}
+	},
+	measureLayout: function measureLayout(node, relativeToNativeNode, onFail, onSuccess) {
+		_measureLayout(node, relativeToNativeNode, onSuccess);
+	},
+	updateView: function updateView(node, props) {
+		for (var prop in props) {
+			if (!Object.prototype.hasOwnProperty.call(props, prop)) {
+				continue;
+			}
 
-      var value = props[prop];
+			var value = props[prop];
 
-      switch (prop) {
-        case 'style':
-          {
-            setValueForStyles(node, value);
-            break;
-          }
+			switch (prop) {
+				case "style": {
+					setValueForStyles(node, value);
+					break;
+				}
 
-        case 'class':
-        case 'className':
-          {
-            node.setAttribute('class', value);
-            break;
-          }
+				case "class":
+				case "className": {
+					const c = node.getAttribute("class");
+					if (c.includes(value)) break;
+					node.setAttribute("class", c + " " + value);
+					break;
+				}
 
-        case 'text':
-        case 'value':
-          // native platforms use `text` prop to replace text input value
-          node.value = value;
-          break;
+				case "text":
+				case "value":
+					// native platforms use `text` prop to replace text input value
+					node.value = value;
+					break;
 
-        default:
-          node.setAttribute(prop, value);
-      }
-    }
-  },
-  configureNextLayoutAnimation: function configureNextLayoutAnimation(config, onAnimationDidEnd) {
-    onAnimationDidEnd();
-  },
-  // mocks
-  setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental() {}
+				default:
+					node.setAttribute(prop, value);
+			}
+		}
+	},
+	configureNextLayoutAnimation: function configureNextLayoutAnimation(config, onAnimationDidEnd) {
+		onAnimationDidEnd();
+	},
+	// mocks
+	setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental() {},
 };
 export default UIManager;
diff --git a/node_modules/react-native-web/dist/modules/createDOMProps/index.js b/node_modules/react-native-web/dist/modules/createDOMProps/index.js
index d3796b2..d92b5c7 100644
--- a/node_modules/react-native-web/dist/modules/createDOMProps/index.js
+++ b/node_modules/react-native-web/dist/modules/createDOMProps/index.js
@@ -404,8 +404,14 @@ var createDOMProps = function createDOMProps(elementType, props) {
       className = _styleResolver$resolv.className,
       style = _styleResolver$resolv.style;
 
+  domProps.className = ""
+
   if (className != null && className !== '') {
-    domProps.className = className;
+    domProps.className += className;
+  }
+
+  if (props.className) {
+    domProps.className +=" "+ props.className
   }
 
   if (style) {
diff --git a/node_modules/react-native-web/dist/modules/pick/index.js b/node_modules/react-native-web/dist/modules/pick/index.js
index 343cdb0..4531f7d 100644
--- a/node_modules/react-native-web/dist/modules/pick/index.js
+++ b/node_modules/react-native-web/dist/modules/pick/index.js
@@ -11,7 +11,7 @@ export default function pick(obj, list) {
 
   for (var key in obj) {
     if (obj.hasOwnProperty(key)) {
-      if (list[key] === true || // Temporary until ARIA is mapped to explicit props
+      if (list[key] === true || key === "className" || // Temporary until ARIA is mapped to explicit props
       key.indexOf('aria-') === 0) {
         nextObj[key] = obj[key];
       }
